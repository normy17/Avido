# Generated by Django 5.0.4 on 2024-04-11 16:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdObjectModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_make', models.CharField(blank=True, max_length=256, null=True, verbose_name='Марка машины')),
                ('car_model', models.CharField(blank=True, max_length=256, null=True, verbose_name='Модель машины')),
                ('year_of_issue', models.IntegerField(blank=True, default=2000, null=True, validators=[django.core.validators.MaxValueValidator(2024), django.core.validators.MinValueValidator(1950)], verbose_name='Год выпуска')),
                ('color', models.CharField(blank=True, max_length=256, null=True, verbose_name='Цвет')),
                ('body_type', models.CharField(blank=True, choices=[('Sedan', 'Седан'), ('Hatchback', 'Хэтчбек'), ('Pickup', 'Пикап'), ('Limousine', 'Лимузин'), ('Universal', 'Универсал'), ('Minivan', 'Минивэн'), ('Coupe', 'Купе'), ('Cabriolet', 'Кабриолет')], max_length=256, null=True, verbose_name='Вид кузова')),
                ('fuel_type', models.CharField(blank=True, choices=[('Petrol', 'Бензин'), ('Diesel', 'Дизель'), ('Propane', 'Пропан'), ('Electricity', 'Электричество')], max_length=256, null=True, verbose_name='Вид топлива')),
                ('mileage', models.IntegerField(blank=True, null=True, verbose_name='Пробег')),
                ('property_type', models.CharField(blank=True, choices=[('Apartment', 'Квартира'), ('House', 'Дом'), ('Other', 'Прочее')], max_length=256, null=True, verbose_name='Тип недвижимости')),
                ('area', models.IntegerField(blank=True, null=True, verbose_name='Площадь')),
                ('rooms', models.IntegerField(blank=True, null=True, verbose_name='Количество комнат')),
                ('floors', models.IntegerField(blank=True, null=True, verbose_name='Этаж/этажность')),
                ('state', models.CharField(blank=True, choices=[('Primary housing', 'Первичное жилье'), ('Secondary housing', 'Вторичное жилье')], max_length=256, null=True, verbose_name='Состояние')),
                ('job_title', models.CharField(blank=True, max_length=256, null=True, verbose_name='Название вакансии')),
                ('requirements', models.CharField(blank=True, max_length=256, null=True, verbose_name='Требования')),
                ('conditions', models.CharField(blank=True, max_length=256, null=True, verbose_name='Условия работы')),
                ('schedule', models.CharField(blank=True, max_length=256, null=True, verbose_name='График работы')),
                ('contacts', models.CharField(blank=True, max_length=256, null=True, verbose_name='Контактная информация работодателя')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=12, verbose_name='Телефон')),
                ('rating', models.FloatField(default=0, verbose_name='Рейтинг')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdvertModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price', models.IntegerField(default=0, verbose_name='Цена')),
                ('address', models.CharField(max_length=256, verbose_name='Адрес')),
                ('publication_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата публикации')),
                ('is_displayed', models.BooleanField(default=True)),
                ('ad_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avidoapp.adobjectmodel', verbose_name='Объект продажи')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
        ),
        migrations.CreateModel(
            name='ChatModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('advert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avidoapp.advertmodel', verbose_name='Объявление')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Покупатель')),
            ],
        ),
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.ImageField(upload_to='images', verbose_name='Фотография')),
                ('advert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avidoapp.advertmodel', verbose_name='Объявление')),
            ],
        ),
        migrations.CreateModel(
            name='MessageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_time', models.DateTimeField(verbose_name='Дата создания сообщения')),
                ('text', models.TextField(verbose_name='Текст')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор сообщения')),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avidoapp.chatmodel', verbose_name='Чат')),
            ],
        ),
    ]
